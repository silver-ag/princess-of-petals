name: Build

on: [push]

jobs:
  test_Ubuntu:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: install_dependencies
      run: |
        sudo add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu `lsb_release -sc` main universe restricted multiverse"
        sudo apt-get update -y -qq
        sudo apt-get install libsdl2-dev libsdl2-image-dev
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B .
        -DCMAKE_CXX_COMPILER=g++
        -DCMAKE_C_COMPILER=gcc
        -DCMAKE_BUILD_TYPE=Release
        -S ${{ github.workspace }}/src

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build . --config Release

  test_Windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v1

    - name: install packages
      shell: pwsh
      run: |
        choco install nasm
        echo "C:\Program Files\NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - uses: libsdl-org/setup-sdl@main
      id: sdl
      with:
        install-linux-dependencies: true
        version: 2-latest
        version-sdl-image: 2-latest
        add-to-environment: true

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        ls && pwd &&
        cmake -B .
        -DCMAKE_CXX_COMPILER=g++
        -DCMAKE_C_COMPILER=gcc
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_PREFIX_PATH=${{ steps.sdl.outputs.prefix }}
        -DCMAKE_C_FLAGS="-I ${{ steps.sdl.outputs.prefix }}/include/ -L ${{ steps.sdl.outputs.prefix }}/lib/ -lSDL2 -lSDL2main -lmingw32 -mwindows"
        -DCMAKE_CXX_FLAGS="-I ${{ steps.sdl.outputs.prefix }}/include/ -L ${{ steps.sdl.outputs.prefix }}/lib/ -lSDL2 -lSDL2main -lmingw32 -mwindows"
        -DSDL2="${{ steps.sdl.outputs.prefix }}"
        -DCMAKE_VERBOSE_MAKEFILE="ON"
        -S src
        -G "MinGW Makefiles"

    - name: Debug Info
      run: >
        ls ${{ steps.sdl.outputs.prefix }} &&
        cmake --version

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build . --config Release
